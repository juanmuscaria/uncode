import org.gradle.nativeplatform.platform.internal.DefaultNativePlatform

plugins {
    id("com.github.johnrengelman.shadow") version "7.1.2"
    id("io.micronaut.application") version "3.3.2"
    id("nebula.ospackage") version "9.1.1"
    id("net.kyori.blossom") version "1.2.0"
    id "com.github.hierynomus.license" version "0.16.1"
}

version = "1.0.0"
group = "com.juanmuscaria"

repositories {
    mavenCentral()
}

dependencies {
    annotationProcessor("org.projectlombok:lombok")
    annotationProcessor("info.picocli:picocli-codegen")
    implementation("info.picocli:picocli")
    implementation("io.micronaut:micronaut-jackson-databind")
    implementation("io.micronaut:micronaut-runtime")
    implementation("io.micronaut.picocli:micronaut-picocli")
    implementation("jakarta.annotation:jakarta.annotation-api")
    implementation("org.ow2.asm:asm-commons:9.3")
    implementation("org.fusesource.jansi:jansi:2.4.0")
    compileOnly("org.projectlombok:lombok")
    runtimeOnly("ch.qos.logback:logback-classic")
    compileOnly("org.graalvm.nativeimage:svm")

    implementation("io.micronaut:micronaut-validation")

    testImplementation("io.micronaut:micronaut-http-client")
}

application {
    mainClass.set("com.juanmuscaria.uncode.Uncode")
}

java {
    toolchain.languageVersion = JavaLanguageVersion.of(17)
}

micronaut {
    testRuntime("junit5")
    processing {
        incremental(true)
        annotations("com.juanmuscaria.*")
    }
}

blossom {
    replaceToken("%VERSION%", project.getVersion().toString())
}

shadowJar {
    minimize()
}

ospackage {
    packageName("uncode")
    maintainer("juanmuscaria")

    from ("${buildDir}/native/nativeCompile/uncode") {
        into "/usr/bin/"
    }
}

buildDeb {
    archiveName("uncode-".concat(project.getVersion().toString()).concat(".deb"))
}

buildRpm {
    archiveName("uncode-".concat(project.getVersion().toString()).concat(".rpm"))
}

task buildAllDistributions(type: Copy) {
    group("distribution")
    description = "Builds all distributions"
    into("${buildDir}/distributions/")

    OperatingSystem os = DefaultNativePlatform.currentOperatingSystem

    dependsOn("buildGenericDistributions")
    if (os.isLinux()) {
        dependsOn("buildDeb")
        dependsOn("buildRpm")
        from("${buildDir}/native/nativeCompile/uncode")
    } else if (os.isMacOsX()) {
        //TODO: Untested
        dependsOn("nativeBuild")
        from("${buildDir}/native/nativeCompile/uncode")
    } else if (os.isWindows()) {
        //TODO: Untested
        dependsOn("nativeBuild")
        from("${buildDir}/native/nativeCompile/uncode.exe")
    } else {
        project.logger.warn("Unsupported operating system: ${os.name}, building only generic distribution.")
    }
}

task buildGenericDistributions {
    group("distribution")
    description = "Builds all non system dependent distributions"

    dependsOn("shadowDistZip")
    dependsOn("distZip")
}

[buildDeb, buildRpm]*.dependsOn("nativeBuild")

license {
    header = file('GPL-3.0-header')
    ext.year = '2022'
    ext.name = 'juanmuscaria'
    ext.email = 'juanmuscaria@gmail.com'
    includes(["**/*.java"])
}